{
  "db_name": "PostgreSQL",
  "query": "SELECT * FROM (\n                SELECT\n                    index,\n                    transaction_index,\n                    address,\n                    amount,\n                    delegated_stake,\n                    num_txs,\n                    delegated_restake_earnings,\n                    delegated_target_baker_id\n                FROM accounts\n                WHERE\n                    -- Filter for only the accounts that are within the\n                    -- range that correspond to the requested page.\n                    -- The first condition is true only if we don't order by that field.\n                    -- Then the whole OR condition will be true, so the filter for that\n                    -- field will be ignored.\n                    (NOT $3 OR index           > $1 AND index           < $2) AND\n                    (NOT $4 OR amount          > $1 AND amount          < $2) AND\n                    (NOT $5 OR num_txs         > $1 AND num_txs         < $2) AND\n                    (NOT $6 OR delegated_stake > $1 AND delegated_stake < $2) AND\n                    -- Need to filter for only delegators if the user requests this.\n                    (NOT $7 OR delegated_stake > 0)\n                ORDER BY\n                    -- Order by the field requested. Depending on the order of the collection\n                    -- and whether it is the first or last being queried, this sub-query must\n                    -- order by:\n                    --\n                    -- | Collection | Operation | Sub-query |\n                    -- |------------|-----------|-----------|\n                    -- | ASC        | first     | ASC       |\n                    -- | DESC       | first     | DESC      |\n                    -- | ASC        | last      | DESC      |\n                    -- | DESC       | last      | ASC       |\n                    --\n                    -- Note that `$8` below represents `is_desc != is_last`.\n                    --\n                    -- The first condition is true if we order by that field.\n                    -- Otherwise false, which makes the CASE null, which means\n                    -- it will not affect the ordering at all.\n                    (CASE WHEN $3 AND $8     THEN index           END) DESC,\n                    (CASE WHEN $3 AND NOT $8 THEN index           END) ASC,\n                    (CASE WHEN $4 AND $8     THEN amount          END) DESC,\n                    (CASE WHEN $4 AND NOT $8 THEN amount          END) ASC,\n                    (CASE WHEN $5 AND $8     THEN num_txs         END) DESC,\n                    (CASE WHEN $5 AND NOT $8 THEN num_txs         END) ASC,\n                    (CASE WHEN $6 AND $8     THEN delegated_stake END) DESC,\n                    (CASE WHEN $6 AND NOT $8 THEN delegated_stake END) ASC\n                LIMIT $9\n            )\n            -- We need to order each page still, as we only use the DESC/ASC ordering above\n            -- to select page items from the start/end of the range.\n            -- Each page must still independently be ordered.\n            -- See also https://relay.dev/graphql/connections.htm#sec-Edge-order\n            ORDER BY\n                (CASE WHEN $3 AND $10     THEN index           END) DESC,\n                (CASE WHEN $3 AND NOT $10 THEN index           END) ASC,\n                (CASE WHEN $4 AND $10     THEN amount          END) DESC,\n                (CASE WHEN $4 AND NOT $10 THEN amount          END) ASC,\n                (CASE WHEN $5 AND $10     THEN num_txs         END) DESC,\n                (CASE WHEN $5 AND NOT $10 THEN num_txs         END) ASC,\n                (CASE WHEN $6 AND $10     THEN delegated_stake END) DESC,\n                (CASE WHEN $6 AND NOT $10 THEN delegated_stake END) ASC",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "index",
        "type_info": "Int8"
      },
      {
        "ordinal": 1,
        "name": "transaction_index",
        "type_info": "Int8"
      },
      {
        "ordinal": 2,
        "name": "address",
        "type_info": "Varchar"
      },
      {
        "ordinal": 3,
        "name": "amount",
        "type_info": "Int8"
      },
      {
        "ordinal": 4,
        "name": "delegated_stake",
        "type_info": "Int8"
      },
      {
        "ordinal": 5,
        "name": "num_txs",
        "type_info": "Int8"
      },
      {
        "ordinal": 6,
        "name": "delegated_restake_earnings",
        "type_info": "Bool"
      },
      {
        "ordinal": 7,
        "name": "delegated_target_baker_id",
        "type_info": "Int8"
      }
    ],
    "parameters": {
      "Left": [
        "Int8",
        "Int8",
        "Bool",
        "Bool",
        "Bool",
        "Bool",
        "Bool",
        "Bool",
        "Int8",
        "Bool"
      ]
    },
    "nullable": [
      false,
      true,
      false,
      false,
      false,
      false,
      true,
      true
    ]
  },
  "hash": "f7dc366f7d77f81c6d1d030fc22deecf2a8aa2c1a79bbde00e721cdd12e0293a"
}
