# Deployment for running a CCDScan Backend instance, including a TimescaleDB instance.
# The backend may be run as an existing (official) image or built from local source.
# See the readme for usage.

version: "3"
services:
  backend:
    image: ${CCDSCAN_BACKEND_IMAGE-concordium/ccdscan:test}
    ports:
      - "${CCDSCAN_BACKEND_PORT-5000}:5000"
    build:
      context: ./backend
      args:
        DOTNET_VERSION: '6.0'
    environment:
    - ImportValidation__Enabled=false
    - ConcordiumNodeGrpc__AuthenticationToken=rpcadmin
    - ConcordiumNodeGrpc__Address=${CCDSCAN_NODE_GRPC_ADDRESS-http://172.17.0.1:10000}
    - PostgresDatabase__ConnectionString=Host=timescaledb;Port=5432;Database=ccscan;User ID=postgres;Password=password;Include Error Detail=true;
    - PostgresDatabase__ConnectionStringNodeCache=Host=timescaledb;Port=5432;Database=ccscan_node_cache;User ID=postgres;Password=password;Include Error Detail=true;
    - FeatureFlags__ConcordiumNodeImportEnabled=true
    - FeatureFlags__MigrateDatabasesAtStartup=true
    - NodeCollectorService__Address=https://dashboard.${CCDSCAN_DOMAIN-testnet.concordium.com}/nodesSummary
    networks:
    - ccdscan
    depends_on:
    - timescaledb
    restart: unless-stopped  # it seems like startup sometimes fails because the DB isn't ready yet
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    environment:
    - POSTGRES_PASSWORD=password
    networks:
    - ccdscan
    volumes:
    - ccdscan:/var/lib/postgresql/data
volumes:
  ccdscan:
networks:
  ccdscan:
