using System.Collections.Generic;
using System.Numerics;
using System.Threading;
using Application.Aggregates.Contract.Configurations;
using Application.Aggregates.Contract.EventLogs;
using Application.Aggregates.Contract.Extensions;
using Application.Aggregates.Contract.Jobs;
using Application.Api.GraphQL.Transactions;
using Application.Common.Diagnostics;
using Concordium.Sdk.Types;
using FluentAssertions;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Moq;
using Tests.TestUtilities;
using Tests.TestUtilities.Builders;
using Tests.TestUtilities.Stubs;
using ContractInitialized = Application.Api.GraphQL.Transactions.ContractInitialized;

namespace Tests.Aggregates.Contract.Jobs;

[Collection(DatabaseCollectionFixture.DatabaseCollection)]
public sealed class _10_CisEventReinitializationTests
{
    private readonly DatabaseFixture _fixture;
    private const int ContractIndex = 2059;
    
    public _10_CisEventReinitializationTests(DatabaseFixture fixture)
    {
        _fixture = fixture;
    }
    
    /// <summary>
    /// Two events has been generated by calling the wCCD contract on testnet.
    ///
    /// One mint event, which mints 1.000.000 tokens and thereafter one burn event
    /// which burns 42 tokens.
    /// The expected token balance after the mint- and burn event is 999.958.
    /// </summary>
    [Fact]
    public async Task WhenRunJob_ThenUpdateTokenRelatedEntities()
    {
        // Arrange
        await DatabaseFixture.TruncateTables("graphql_contract_events");
        ContractExtensions.AddDapperTypeHandlers();
        const int expectedBalance = 999958;
        const string expectedTokenId = "";
        const int accountId = 1;
        await AddContractEvents();
        var accountLookup = new AccountLookupStub();
        accountLookup.AddToCache(AccountAddress.From("3fpkgmKcGDKGgsDhUQEBAQXbFZJQw97JmbuhzmvujYuG1sQxtV").GetBaseAddress().ToString(), accountId);
        
        var eventLogWriter = new EventLogWriter(
            _fixture.CreateDbContractFactoryMock().Object, 
            accountLookup,
            Mock.Of<IMetrics>());

        var job = new _05_CisEventReinitialization(
            _fixture.CreateDbContractFactoryMock().Object,
            eventLogWriter,
            Options.Create(new ContractAggregateOptions())
            );

        // Act
        await job.Setup(CancellationToken.None);
        await job.Process(ContractIndex, CancellationToken.None);
        
        // Assert
        await using var context = _fixture.CreateGraphQlDbContext();
        
        var token = await context.Tokens.SingleAsync();
        token.TokenId.Should().Be(expectedTokenId);
        token.TotalSupply.Should().Be(expectedBalance);

        var tokenEvents = await context.TokenEvents.ToListAsync();
        tokenEvents.Count.Should().Be(2);

        var accountToken = await context.AccountTokens.SingleAsync();
        accountToken.TokenId.Should().Be(expectedTokenId);
        accountToken.ContractIndex.Should().Be(ContractIndex);
        accountToken.Balance.Should().Be(new BigInteger(expectedBalance));
        accountToken.AccountId.Should().Be(accountId);
    }
    
    private async Task AddContractEvents()
    {
        const string mintEvent = "fe00c0843d005f8b99a3ea8089002291fd646554848b00e7a0cd934e5bad6e6e93a4d4f4dc79";
        const string burnEvent = "fd002a005f8b99a3ea8089002291fd646554848b00e7a0cd934e5bad6e6e93a4d4f4dc79";
        var contractAddress = ContractAddress.From(ContractIndex, 0);
        const string name = "inventory.transfer";
        _ = ReceiveName.TryParse(name, out var output);
        var mintUpdate = new Updated(
            ContractVersion.V1,
            contractAddress,
            AccountAddress.From("31JA2dWnv6xHrdP73kLKvWqr5RMfqoeuJXG2Mep1iyQV9E5aSd"),
            CcdAmount.Zero,
            new Parameter(Array.Empty<byte>()), 
            output.ReceiveName!,
            new List<ContractEvent>
            {
                new(Convert.FromHexString(mintEvent))
            });
        var contractMintUpdate = ContractUpdated.From(mintUpdate);
        var contractMintEvent = ContractEventBuilder.Create()
            .WithContractAddress(new Application.Api.GraphQL.ContractAddress(contractAddress.Index, contractAddress.SubIndex))
            .WithEvent(contractMintUpdate)
            .WithBlockHeight(1)
            .Build();
        
        var burnUpdate = new Updated(
            ContractVersion.V1,
            contractAddress,
            AccountAddress.From("31JA2dWnv6xHrdP73kLKvWqr5RMfqoeuJXG2Mep1iyQV9E5aSd"),
            CcdAmount.Zero,
            new Parameter(Array.Empty<byte>()), 
            output.ReceiveName!,
            new List<ContractEvent>
            {
                new(Convert.FromHexString(burnEvent))
            });
        var contractBurnUpdate = ContractUpdated.From(burnUpdate);
        var contractBurnEvent = ContractEventBuilder.Create()
            .WithContractAddress(new Application.Api.GraphQL.ContractAddress(contractAddress.Index, contractAddress.SubIndex))
            .WithEvent(contractBurnUpdate)
            .WithBlockHeight(2)
            .Build();
        
        await using var context = _fixture.CreateGraphQlDbContext();
        await context.AddRangeAsync(contractMintEvent, contractBurnEvent);
        await context.SaveChangesAsync();
    }

    [Fact]
    public async Task WhenGetOrderedContractEvents_ThenGetOrderedContractEvents()
    {
        // Arrange
        await DatabaseFixture.TruncateTables("graphql_contract_events");
        ContractExtensions.AddDapperTypeHandlers();
        const string name = "inventory.transfer";
        const int contractIndex = 1;
        _ = ReceiveName.TryParse(name, out var output);
        var accountAddress = AccountAddress.From("31JA2dWnv6xHrdP73kLKvWqr5RMfqoeuJXG2Mep1iyQV9E5aSd");
        var parameter = new Parameter(Array.Empty<byte>());
        var contractAddress = ContractAddress.From(contractIndex, 0);
        var address = new Application.Api.GraphQL.ContractAddress(contractAddress.Index, contractAddress.SubIndex);
        var job = new _05_CisEventReinitialization(
            _fixture.CreateDbContractFactoryMock().Object,
            Mock.Of<IEventLogWriter>(),
            Options.Create(new ContractAggregateOptions())
        );
        
        // Event with correct type and contract
        var updateCorrect = new Updated(
            ContractVersion.V1,
            contractAddress,
            accountAddress,
            CcdAmount.Zero,
            parameter, 
            output.ReceiveName!,
            new List<ContractEvent>());
        var updateCorrectEvent = ContractEventBuilder.Create()
            .WithContractAddress(address)
            .WithEvent(ContractUpdated.From(updateCorrect))
            .WithBlockHeight(1)
            .WithTransactionIndex(2)
            .WithEventIndex(2)
            .Build();
        
        // Event with correct type but wrong contract contract
        var updateWrongContractAddress = new Updated(
            ContractVersion.V1,
            new ContractAddress(2,0),
            accountAddress,
            CcdAmount.Zero,
            parameter, 
            output.ReceiveName!,
            new List<ContractEvent>());
        var updateWrongContractAddressEvent = ContractEventBuilder.Create()
            .WithContractAddress(new Application.Api.GraphQL.ContractAddress(2, 0))
            .WithEvent(ContractUpdated.From(updateWrongContractAddress))
            .WithBlockHeight(2)
            .Build();
        
        // Correct type and contract with same block height lower higher transaction index
        var interrupted = new Interrupted(contractAddress, new List<ContractEvent>());
        var interruptedEvent = ContractEventBuilder.Create()
            .WithContractAddress(address)
            .WithEvent(ContractInterrupted.From(interrupted))
            .WithBlockHeight(1)
            .WithTransactionIndex(1)
            .WithEventIndex(2)
            .Build();
        
        // Correct type and contract with same block height, transaction index and lower event index
        _ = ContractName.TryParse("init_foo", out var contractNameOutput);
        var contractInitialized = new Concordium.Sdk.Types.ContractInitialized(
            new ContractInitializedEvent(
                ContractVersion.V1,
                new ModuleReference(Convert.ToHexString(new byte[32])),
                contractAddress,
                CcdAmount.Zero,
                contractNameOutput.ContractName!,
                new List<ContractEvent>(),
                null
            ));
        var contractInitializedEvent = ContractEventBuilder.Create()
            .WithContractAddress(address)
            .WithEvent(ContractInitialized.From(contractInitialized))
            .WithBlockHeight(1)
            .WithTransactionIndex(1)
            .WithEventIndex(1)
            .Build();
        
        // Wrong type
        var resumed = new Resumed(contractAddress, true);
        var resumedEvent = ContractEventBuilder.Create()
            .WithContractAddress(address)
            .WithEvent(ContractResumed.From(resumed))
            .WithBlockHeight(1)
            .WithTransactionIndex(1)
            .WithEventIndex(1)
            .Build();
        
        await using (var context = _fixture.CreateGraphQlDbContext())
        {
            await context.AddRangeAsync(
                updateCorrectEvent,
                updateWrongContractAddressEvent,
                interruptedEvent,
                contractInitializedEvent
            );
            await context.SaveChangesAsync();    
        }
        
        // Act
        var orderedContractEvents = await job.GetOrderedContractEvents(contractIndex);

        // Assert
        orderedContractEvents.Count.Should().Be(3);
        orderedContractEvents[0].Event.Should().BeOfType<ContractInitialized>();
        orderedContractEvents[1].Event.Should().BeOfType<ContractInterrupted>();
        orderedContractEvents[2].Event.Should().BeOfType<ContractUpdated>();
    }

    [Fact]
    public void WhenOptimizeCisAccountUpdate_ThenOnlyInsertSubset()
    {
        // Arrange
        var cisAccountUpdates = new List<CisAccountUpdate>
        {
            new()
            {
                AmountDelta = new BigInteger(42),
                Address = new Application.Api.GraphQL.Accounts.AccountAddress("A"),
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = ""
            },
            new()
            {
                AmountDelta = new BigInteger(42),
                Address = new Application.Api.GraphQL.Accounts.AccountAddress("B"),
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = "1"
            },
            new()
            {
                AmountDelta = new BigInteger(42),
                Address = new Application.Api.GraphQL.Accounts.AccountAddress("A"),
                ContractSubIndex = 2,
                ContractIndex = 0,
                TokenId = ""
            },
            new()
            {
                AmountDelta = new BigInteger(-12),
                Address = new Application.Api.GraphQL.Accounts.AccountAddress("A"),
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = ""
            },
            new()
            {
                AmountDelta = new BigInteger(42),
                Address = new Application.Api.GraphQL.Accounts.AccountAddress("B"),
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = "1"
            }
        };
        
        // Act
        var job = _05_CisEventReinitialization.OptimizeCisAccountUpdate(cisAccountUpdates);

        // Assert
        var expected = new List<CisAccountUpdate>
        {
            new()
            {
                AmountDelta = new BigInteger(30),
                Address = new Application.Api.GraphQL.Accounts.AccountAddress("A"),
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = ""
            },
            new()
            {
                AmountDelta = new BigInteger(84),
                Address = new Application.Api.GraphQL.Accounts.AccountAddress("B"),
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = "1"
            },
            new()
            {
                AmountDelta = new BigInteger(42),
                Address = new Application.Api.GraphQL.Accounts.AccountAddress("A"),
                ContractSubIndex = 2,
                ContractIndex = 0,
                TokenId = ""
            }
        };
        job.Count().Should().Be(expected.Count);
        var jobSet = job.ToDictionary(j => (j.ContractIndex, j.ContractSubIndex, j.TokenId, j.Address),
            j => j.AmountDelta);
        var expectedSet = expected.ToDictionary(j => (j.ContractIndex, j.ContractSubIndex, j.TokenId, j.Address),
            j => j.AmountDelta);
        foreach (var keyValuePair in jobSet)
        {
            expectedSet.TryGetValue(keyValuePair.Key, out var expectedValue).Should().BeTrue();
            expectedValue.Should().Be(keyValuePair.Value);
        }
    }
    
    [Fact]
    public void WhenOptimizeCisEventTokenUpdate_ThenOnlyInsertSubset()
    {
        // Arrange
        var tokenUpdates = new List<CisEventTokenUpdate>
        {
            new CisEventTokenMetadataUpdate
            {
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = "",
                MetadataUrl = "Foo"
            },
            new CisEventTokenAmountUpdate
            {
                AmountDelta = new BigInteger(42),
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = "1"
            },
            new CisEventTokenMetadataUpdate
            {
                ContractSubIndex = 2,
                ContractIndex = 0,
                TokenId = "",
                MetadataUrl = "Something else"
            },
            new CisEventTokenMetadataUpdate
            {
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = "",
                MetadataUrl = "Bar"
            },
            new CisEventTokenAmountUpdate
            {
                AmountDelta = new BigInteger(42),
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = ""
            },
            new CisEventTokenAmountUpdate
            {
                AmountDelta = new BigInteger(42),
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = "1"
            }
        };
        
        // Act
        var job = _05_CisEventReinitialization.OptimizeCisEventTokenUpdate(tokenUpdates).ToList();

        // Assert
        var expected = new List<CisEventTokenUpdate>
        {
            new CisEventTokenMetadataUpdate
            {
                ContractSubIndex = 2,
                ContractIndex = 0,
                TokenId = "",
                MetadataUrl = "Something else"
            },
            new CisEventTokenMetadataUpdate
            {
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = "",
                MetadataUrl = "Bar"
            },
            new CisEventTokenAmountUpdate
            {
                AmountDelta = new BigInteger(42),
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = ""
            },
            new CisEventTokenAmountUpdate
            {
                AmountDelta = new BigInteger(84),
                ContractSubIndex = 1,
                ContractIndex = 0,
                TokenId = "1"
            }
        };
        job.Count.Should().Be(expected.Count);
        
        var actualTokenMetadataUpdates = job
            .Where(j => j is CisEventTokenMetadataUpdate)
            .Cast<CisEventTokenMetadataUpdate>()
            .ToDictionary(j => (j.ContractIndex, j.ContractSubIndex, j.TokenId), j => j.MetadataUrl);
        var actualTokenAmountUpdate = job
            .Where(j => j is CisEventTokenAmountUpdate)
            .Cast<CisEventTokenAmountUpdate>()
            .ToDictionary(j => (j.ContractIndex, j.ContractSubIndex, j.TokenId), j => j.AmountDelta);
        
        var expectedTokenMetadataUpdates = expected
            .Where(j => j is CisEventTokenMetadataUpdate)
            .Cast<CisEventTokenMetadataUpdate>()
            .ToDictionary(j => (j.ContractIndex, j.ContractSubIndex, j.TokenId), j => j.MetadataUrl);
        var expectedTokenAmountUpdate = expected
            .Where(j => j is CisEventTokenAmountUpdate)
            .Cast<CisEventTokenAmountUpdate>()
            .ToDictionary(j => (j.ContractIndex, j.ContractSubIndex, j.TokenId), j => j.AmountDelta);        
        
        foreach (var keyValuePair in actualTokenMetadataUpdates)
        {
            expectedTokenMetadataUpdates.TryGetValue(keyValuePair.Key, out var expectedValue).Should().BeTrue();
            expectedValue.Should().Be(keyValuePair.Value);
        }
        foreach (var keyValuePair in actualTokenAmountUpdate)
        {
            expectedTokenAmountUpdate.TryGetValue(keyValuePair.Key, out var expectedValue).Should().BeTrue();
            expectedValue.Should().Be(keyValuePair.Value);
        }
    }    
}
