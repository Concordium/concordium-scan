using Application.Api.GraphQL.EfCore;
using Dapper;
using FluentAssertions;
using Tests.TestUtilities;
using Tests.TestUtilities.Builders;

namespace Tests.Api.GraphQL.EfCore;

[Collection("Postgres Collection")]
public class IdentityProviderWriterTest : IClassFixture<DatabaseFixture>
{
    private readonly GraphQlDbContextFactoryStub _dbContextFactory;
    private readonly IdentityProviderWriter _target;

    public IdentityProviderWriterTest(DatabaseFixture dbFixture)
    {
        _dbContextFactory = new GraphQlDbContextFactoryStub(dbFixture.DatabaseSettings);
        _target = new IdentityProviderWriter(_dbContextFactory);

        using var connection = dbFixture.GetOpenConnection();
        connection.Execute("TRUNCATE TABLE graphql_identity_providers");
    }

    [Fact]
    public async Task AddOrUpdate_AddSingle()
    {
        var input = new IdentityProviderInfoBuilder()
            .WithIpIdentity(42)
            .WithName("Foo bar")
            .WithUrl("http://example.com")
            .WithDescription("Lorem ipsum")
            .Build();

        await _target.AddOrUpdate(new[] { input });
        
        var dbContext = _dbContextFactory.CreateDbContext();
        var result = dbContext.IdentityProviders.Single();
        result.IpIdentity.Should().Be(42);
        result.Name.Should().Be("Foo bar");
        result.Url.Should().Be("http://example.com");
        result.Description.Should().Be("Lorem ipsum");
    }

    [Fact]
    public async Task AddOrUpdate_UpdateSingle()
    {
        var builder = new IdentityProviderInfoBuilder()
            .WithIpIdentity(42)
            .WithName("Foo bar")
            .WithUrl("http://example.com")
            .WithDescription("Lorem ipsum");
        
        await _target.AddOrUpdate(new[] { builder.Build() });
        
        builder
            .WithName("Baldur")
            .WithUrl("https://ccdscan.io")
            .WithDescription("Dolor sit amet");

        await _target.AddOrUpdate(new[] { builder.Build() });

        var dbContext = _dbContextFactory.CreateDbContext();
        var result = dbContext.IdentityProviders.Single();
        result.IpIdentity.Should().Be(42);
        result.Name.Should().Be("Baldur");
        result.Url.Should().Be("https://ccdscan.io");
        result.Description.Should().Be("Dolor sit amet");
    }

    /// <summary>
    /// Zero is a special case that might lead EF-core to expect value to be generated by the database if not configured correctly.
    /// </summary>
    [Fact]
    public async Task AddOrUpdate_AddSingleWithIpIdentityZero()
    {
        var input = new IdentityProviderInfoBuilder()
            .WithIpIdentity(0)
            .Build();

        await _target.AddOrUpdate(new[] { input });
        
        var dbContext = _dbContextFactory.CreateDbContext();
        var result = dbContext.IdentityProviders.Single();
        result.IpIdentity.Should().Be(0);
    }
}