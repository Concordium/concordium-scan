{
  "db_name": "PostgreSQL",
  "query": "SELECT * FROM (\n                    SELECT\n                        index,\n                        transaction_index,\n                        address,\n                        amount,\n                        delegated_stake,\n                        num_txs,\n                        delegated_restake_earnings,\n                        delegated_target_baker_id\n                    FROM accounts\n                    WHERE\n                        -- Filter for only the accounts that are within the\n                        -- range that correspond to the requested page.\n                        -- The first condition is true only if we don't order by that field.\n                        -- Then the whole OR condition will be true, so the filter for that\n                        -- field will be ignored.\n                        (NOT $3 OR index > $1 AND index < $2) AND\n                        (NOT $4 OR \n                            (\n                                amount > $10 AND amount < $11 OR \n                                (amount = $11 AND accounts.index > $2)\n                                OR (amount = $10 AND accounts.index < $1)\n                            )\n                        ) AND\n                        (NOT $5 OR \n                            (\n                                num_txs > $10 AND num_txs < $11 OR \n                                (num_txs = $11 AND accounts.index > $2)\n                                OR (num_txs = $10 AND accounts.index < $1)\n                            )\n                        ) AND\n                        (NOT $6 OR \n                            (\n                                delegated_stake > $10 AND delegated_stake < $11 OR \n                                (delegated_stake = $11 AND accounts.index < $2)\n                                OR (delegated_stake = $10 AND accounts.index > $1)\n                            )\n                        ) AND\n                        -- Need to filter for only delegators if the user requests this.\n                        (NOT $7 OR delegated_stake > 0)\n                    ORDER BY\n                        -- Order primarily by the field requested. Depending on the order of the collection\n                        -- and whether it is the first or last being queried, this sub-query must\n                        -- order by:\n                        --\n                        -- | Collection | Operation | Sub-query |\n                        -- |------------|-----------|-----------|\n                        -- | ASC        | first     | ASC       |\n                        -- | DESC       | first     | DESC      |\n                        -- | ASC        | last      | DESC      |\n                        -- | DESC       | last      | ASC       |\n                        --\n                        -- Note that `$8` below represents `is_desc != is_last`.\n                        --\n                        -- The first condition is true if we order by that field.\n                        -- Otherwise false, which makes the CASE null, which means\n                        -- it will not affect the ordering at all.\n                        -- The `AccountOrderField::Age` is not mention here because its \n                        -- sorting instruction is equivallent and would be repeated in the next step.\n                        (CASE WHEN $4 AND $8     THEN amount          END) DESC,\n                        (CASE WHEN $4 AND NOT $8 THEN amount          END) ASC,\n                        (CASE WHEN $5 AND $8     THEN num_txs         END) DESC,\n                        (CASE WHEN $5 AND NOT $8 THEN num_txs         END) ASC,\n                        (CASE WHEN $6 AND $8     THEN delegated_stake END) DESC,\n                        (CASE WHEN $6 AND NOT $8 THEN delegated_stake END) ASC,\n                        -- Since after the ordring above, there may exists elements with the same field value,\n                        -- apply a second ordering by the unique `account_id` (index) in addition. \n                        -- This ensures a strict ordering of elements as the `AccountFieldDescCursor` defines. \n                        (CASE WHEN $8     THEN index           END) DESC,\n                        (CASE WHEN NOT $8 THEN index           END) ASC\n                    LIMIT $9\n                )\n                -- We need to order each page still, as we only use the DESC/ASC ordering above\n                -- to select page items from the start/end of the range.\n                -- Each page must still independently be ordered.\n                -- See also https://relay.dev/graphql/connections.htm#sec-Edge-order\n                ORDER BY\n                    (CASE WHEN $3     THEN index           END) ASC,\n                    (CASE WHEN $4     THEN amount          END) ASC,\n                    (CASE WHEN $5     THEN num_txs         END) ASC,\n                    (CASE WHEN $6     THEN delegated_stake END) ASC,\n                    index ASC\n                ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "index",
        "type_info": "Int8"
      },
      {
        "ordinal": 1,
        "name": "transaction_index",
        "type_info": "Int8"
      },
      {
        "ordinal": 2,
        "name": "address",
        "type_info": "Varchar"
      },
      {
        "ordinal": 3,
        "name": "amount",
        "type_info": "Int8"
      },
      {
        "ordinal": 4,
        "name": "delegated_stake",
        "type_info": "Int8"
      },
      {
        "ordinal": 5,
        "name": "num_txs",
        "type_info": "Int8"
      },
      {
        "ordinal": 6,
        "name": "delegated_restake_earnings",
        "type_info": "Bool"
      },
      {
        "ordinal": 7,
        "name": "delegated_target_baker_id",
        "type_info": "Int8"
      }
    ],
    "parameters": {
      "Left": [
        "Int8",
        "Int8",
        "Bool",
        "Bool",
        "Bool",
        "Bool",
        "Bool",
        "Bool",
        "Int8",
        "Int8",
        "Int8"
      ]
    },
    "nullable": [
      false,
      true,
      false,
      false,
      false,
      false,
      false,
      true
    ]
  },
  "hash": "6e861830c7b2a53a038979cbc369b086a0db61122636f98e6429ee290726a6ed"
}
