{
  "db_name": "PostgreSQL",
  "query": "-- Inputs:\n-- $1::interval - total period\n-- $2::interval - bucket width \n-- $3::text     - optional token_id (NULL means include all tokens)\n-- This is temprary, might have to modify later\nWITH bucket_time AS (\n  SELECT generate_series(\n    now() - $1::interval,\n    now(),\n    $2::interval\n  ) AS bucket_start\n),\n\nevents_with_block AS (\n  SELECT\n    e.*,\n    pt.token_id,\n    b.slot_time\n  FROM plt_events e\n  JOIN plt_tokens pt ON pt.index = e.token_index\n  JOIN transactions tx ON e.transaction_index = tx.index\n  JOIN blocks b ON tx.block_height = b.height\n),\n\nsupply_with_block AS (\n  SELECT\n    pt.token_id,\n    b.slot_time,\n    (pt.total_minted - pt.total_burned) / POWER(10, pt.decimal) AS total_supply\n  FROM plt_tokens pt\n  JOIN transactions tx ON pt.transaction_index = tx.index\n  JOIN blocks b ON tx.block_height = b.height\n),\n\nholders_with_block AS (\n  SELECT\n    paa.account_index,\n    pt.token_id,\n    paa.amount,\n    b.slot_time\n  FROM plt_accounts paa\n  JOIN plt_tokens pt ON paa.token_index = pt.index\n  JOIN transactions tx ON pt.transaction_index = tx.index\n  JOIN blocks b ON tx.block_height = b.height\n  WHERE paa.amount > 0\n),\n\naggregated AS (\n  SELECT\n    bt.bucket_start,\n\n    -- Event counts\n    (\n      SELECT COUNT(*) FROM events_with_block e\n      WHERE e.slot_time < bt.bucket_start\n        AND ($3::TEXT IS NULL OR e.token_id = $3::TEXT)\n    ) AS start_cumulative_event_count,\n\n    (\n      SELECT COUNT(*) FROM events_with_block e\n      WHERE e.slot_time < bt.bucket_start + $2::interval\n        AND ($3::TEXT IS NULL OR e.token_id = $3::TEXT)\n    ) AS end_cumulative_event_count,\n\n    -- Total supply\n    (\n      SELECT COALESCE(SUM(s.total_supply), 0) FROM supply_with_block s\n      WHERE s.slot_time < bt.bucket_start\n        AND ($3::TEXT IS NULL OR s.token_id = $3::TEXT)\n    ) AS start_total_supply,\n\n    (\n      SELECT COALESCE(SUM(s.total_supply), 0) FROM supply_with_block s\n      WHERE s.slot_time < bt.bucket_start + $2::interval\n        AND ($3::TEXT IS NULL OR s.token_id = $3::TEXT)\n    ) AS end_total_supply,\n\n    -- Unique holders\n    (\n      SELECT COUNT(DISTINCT h.account_index) FROM holders_with_block h\n      WHERE h.slot_time < bt.bucket_start\n        AND ($3::TEXT IS NULL OR h.token_id = $3::TEXT)\n    ) AS start_total_unique_holders,\n\n    (\n      SELECT COUNT(DISTINCT h.account_index) FROM holders_with_block h\n      WHERE h.slot_time < bt.bucket_start + $2::interval\n        AND ($3::TEXT IS NULL OR h.token_id = $3::TEXT)\n    ) AS end_total_unique_holders\n\n  FROM bucket_time bt\n)\n\nSELECT\n  aggregated.bucket_start AS \"bucket_time!\",\n\n  aggregated.start_cumulative_event_count AS \"start_cumulative_event_count!\",\n  aggregated.end_cumulative_event_count AS \"end_cumulative_event_count!\",\n  aggregated.end_cumulative_event_count - aggregated.start_cumulative_event_count AS \"delta_event_count!\",\n\n  aggregated.start_total_supply AS \"start_total_supply!\",\n  aggregated.end_total_supply AS \"end_total_supply!\",\n  aggregated.end_total_supply - aggregated.start_total_supply AS \"delta_total_supply!\",\n\n  aggregated.start_total_unique_holders AS \"start_total_unique_holders!\",\n  aggregated.end_total_unique_holders AS \"end_total_unique_holders!\",\n  aggregated.end_total_unique_holders - aggregated.start_total_unique_holders AS \"delta_unique_holders!\"\n\nFROM aggregated\nORDER BY aggregated.bucket_start;\n",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "bucket_time!",
        "type_info": "Timestamptz"
      },
      {
        "ordinal": 1,
        "name": "start_cumulative_event_count!",
        "type_info": "Int8"
      },
      {
        "ordinal": 2,
        "name": "end_cumulative_event_count!",
        "type_info": "Int8"
      },
      {
        "ordinal": 3,
        "name": "delta_event_count!",
        "type_info": "Int8"
      },
      {
        "ordinal": 4,
        "name": "start_total_supply!",
        "type_info": "Float8"
      },
      {
        "ordinal": 5,
        "name": "end_total_supply!",
        "type_info": "Float8"
      },
      {
        "ordinal": 6,
        "name": "delta_total_supply!",
        "type_info": "Float8"
      },
      {
        "ordinal": 7,
        "name": "start_total_unique_holders!",
        "type_info": "Int8"
      },
      {
        "ordinal": 8,
        "name": "end_total_unique_holders!",
        "type_info": "Int8"
      },
      {
        "ordinal": 9,
        "name": "delta_unique_holders!",
        "type_info": "Int8"
      }
    ],
    "parameters": {
      "Left": [
        "Interval",
        "Interval",
        "Text"
      ]
    },
    "nullable": [
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
    ]
  },
  "hash": "69b5880f9d8f8a3701c133ff666fc134b0a002b569418a94674d8f24449c7eb0"
}
