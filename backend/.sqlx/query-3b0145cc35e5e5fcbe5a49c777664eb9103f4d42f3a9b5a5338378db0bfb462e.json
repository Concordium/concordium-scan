{
  "db_name": "PostgreSQL",
  "query": "-- Inputs:\n-- $1::interval - total period\n-- $2::interval - bucket width\n-- $3::text     - optional token_id (NULL means include all tokens)\n\nWITH bucket_time AS (\n  SELECT generate_series(\n    now() - $1::interval,\n    now(),\n    $2::interval\n  ) AS bucket_start\n),\n\nevents_with_transfer_amounts AS (\n  SELECT\n    e.token_index,\n    pt.token_id,\n    b.slot_time,\n    e.event_type,\n    CASE \n      WHEN e.event_type = 'Transfer' THEN\n        COALESCE(((e.token_event->'amount'->>'value')::numeric / POWER(10, COALESCE(pt.decimal, 0))), 0)\n      ELSE 0\n    END AS transfer_amount\n  FROM plt_events e\n  JOIN plt_tokens pt ON pt.index = e.token_index\n  JOIN transactions tx ON e.transaction_index = tx.index\n  JOIN blocks b ON tx.block_height = b.height\n  WHERE ($3::TEXT IS NULL OR pt.token_id = $3::TEXT)\n),\n\nevents_cumulative AS (\n  SELECT\n    slot_time,\n    COUNT(*) OVER (ORDER BY slot_time) AS cumulative_event_count,\n    COUNT(*) FILTER (WHERE event_type = 'Transfer') OVER (ORDER BY slot_time) AS cumulative_transfer_count,\n    SUM(CASE WHEN event_type = 'Transfer' THEN transfer_amount ELSE 0 END) OVER (ORDER BY slot_time) AS cumulative_transfer_volume\n  FROM events_with_transfer_amounts\n),\n\nsupply_snapshots AS (\n  SELECT\n    pt.token_id,\n    b.slot_time,\n    (COALESCE(pt.total_minted, 0) - COALESCE(pt.total_burned, 0)) / POWER(10, COALESCE(pt.decimal, 0)) AS total_supply\n  FROM plt_tokens pt\n  JOIN transactions tx ON pt.transaction_index = tx.index\n  JOIN blocks b ON tx.block_height = b.height\n  WHERE ($3::TEXT IS NULL OR pt.token_id = $3::TEXT)\n),\n\nholder_balances AS (\n  SELECT\n    paa.account_index,\n    pt.token_id,\n    COALESCE(paa.amount, 0) as amount,\n    b.slot_time\n  FROM plt_accounts paa\n  JOIN plt_tokens pt ON paa.token_index = pt.index\n  JOIN transactions tx ON pt.transaction_index = tx.index\n  JOIN blocks b ON tx.block_height = b.height\n  WHERE COALESCE(paa.amount, 0) > 0 AND ($3::TEXT IS NULL OR pt.token_id = $3::TEXT)\n),\n\naggregated AS (\n  SELECT\n    bt.bucket_start,\n\n    COALESCE(\n      (SELECT cumulative_event_count FROM events_cumulative WHERE slot_time < bt.bucket_start ORDER BY slot_time DESC LIMIT 1), 0\n    ) AS start_cumulative_event_count,\n    COALESCE(\n      (SELECT cumulative_event_count FROM events_cumulative WHERE slot_time < bt.bucket_start + $2::interval ORDER BY slot_time DESC LIMIT 1), 0\n    ) AS end_cumulative_event_count,\n\n    COALESCE(\n      (SELECT cumulative_transfer_count FROM events_cumulative WHERE slot_time < bt.bucket_start ORDER BY slot_time DESC LIMIT 1), 0\n    ) AS start_cumulative_transfer_count,\n    COALESCE(\n      (SELECT cumulative_transfer_count FROM events_cumulative WHERE slot_time < bt.bucket_start + $2::interval ORDER BY slot_time DESC LIMIT 1), 0\n    ) AS end_cumulative_transfer_count,\n\n    COALESCE(\n      (SELECT cumulative_transfer_volume FROM events_cumulative WHERE slot_time < bt.bucket_start ORDER BY slot_time DESC LIMIT 1), 0\n    ) AS start_cumulative_transfer_volume,\n    COALESCE(\n      (SELECT cumulative_transfer_volume FROM events_cumulative WHERE slot_time < bt.bucket_start + $2::interval ORDER BY slot_time DESC LIMIT 1), 0\n    ) AS end_cumulative_transfer_volume,\n\n    COALESCE((\n      SELECT s.total_supply\n      FROM supply_snapshots s\n      WHERE s.slot_time < bt.bucket_start\n      ORDER BY s.slot_time DESC\n      LIMIT 1\n    ), 0) AS start_total_supply,\n    COALESCE((\n      SELECT s.total_supply\n      FROM supply_snapshots s\n      WHERE s.slot_time < bt.bucket_start + $2::interval\n      ORDER BY s.slot_time DESC\n      LIMIT 1\n    ), 0) AS end_total_supply,\n\n    COALESCE((\n      SELECT COUNT(DISTINCT h.account_index)\n      FROM holder_balances h\n      WHERE h.slot_time < bt.bucket_start AND h.amount > 0\n    ), 0) AS start_total_unique_holders,\n    COALESCE((\n      SELECT COUNT(DISTINCT h.account_index)\n      FROM holder_balances h\n      WHERE h.slot_time < bt.bucket_start + $2::interval AND h.amount > 0\n    ), 0) AS end_total_unique_holders\n\n  FROM bucket_time bt\n)\n\nSELECT\n  aggregated.bucket_start AS \"bucket_time!\",\n\n  aggregated.start_cumulative_event_count AS \"start_cumulative_event_count!\",\n  aggregated.end_cumulative_event_count AS \"end_cumulative_event_count!\",\n  aggregated.end_cumulative_event_count - aggregated.start_cumulative_event_count AS \"delta_event_count!\",\n\n  aggregated.start_cumulative_transfer_count AS \"start_cumulative_transfer_count!\",\n  aggregated.end_cumulative_transfer_count AS \"end_cumulative_transfer_count!\",\n  aggregated.end_cumulative_transfer_count - aggregated.start_cumulative_transfer_count AS \"delta_transfer_count!\",\n\n  aggregated.start_cumulative_transfer_volume AS \"start_cumulative_transfer_volume!\",\n  aggregated.end_cumulative_transfer_volume AS \"end_cumulative_transfer_volume!\",\n  aggregated.end_cumulative_transfer_volume - aggregated.start_cumulative_transfer_volume AS \"delta_transfer_volume!\",\n\n  aggregated.start_total_supply AS \"start_total_supply!\",\n  aggregated.end_total_supply AS \"end_total_supply!\",\n  aggregated.end_total_supply - aggregated.start_total_supply AS \"delta_total_supply!\",\n\n  aggregated.start_total_unique_holders AS \"start_total_unique_holders!\",\n  aggregated.end_total_unique_holders AS \"end_total_unique_holders!\",\n  aggregated.end_total_unique_holders - aggregated.start_total_unique_holders AS \"delta_unique_holders!\"\n\nFROM aggregated\nORDER BY aggregated.bucket_start;",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "bucket_time!",
        "type_info": "Timestamptz"
      },
      {
        "ordinal": 1,
        "name": "start_cumulative_event_count!",
        "type_info": "Int8"
      },
      {
        "ordinal": 2,
        "name": "end_cumulative_event_count!",
        "type_info": "Int8"
      },
      {
        "ordinal": 3,
        "name": "delta_event_count!",
        "type_info": "Int8"
      },
      {
        "ordinal": 4,
        "name": "start_cumulative_transfer_count!",
        "type_info": "Int8"
      },
      {
        "ordinal": 5,
        "name": "end_cumulative_transfer_count!",
        "type_info": "Int8"
      },
      {
        "ordinal": 6,
        "name": "delta_transfer_count!",
        "type_info": "Int8"
      },
      {
        "ordinal": 7,
        "name": "start_cumulative_transfer_volume!",
        "type_info": "Float8"
      },
      {
        "ordinal": 8,
        "name": "end_cumulative_transfer_volume!",
        "type_info": "Float8"
      },
      {
        "ordinal": 9,
        "name": "delta_transfer_volume!",
        "type_info": "Float8"
      },
      {
        "ordinal": 10,
        "name": "start_total_supply!",
        "type_info": "Float8"
      },
      {
        "ordinal": 11,
        "name": "end_total_supply!",
        "type_info": "Float8"
      },
      {
        "ordinal": 12,
        "name": "delta_total_supply!",
        "type_info": "Float8"
      },
      {
        "ordinal": 13,
        "name": "start_total_unique_holders!",
        "type_info": "Int8"
      },
      {
        "ordinal": 14,
        "name": "end_total_unique_holders!",
        "type_info": "Int8"
      },
      {
        "ordinal": 15,
        "name": "delta_unique_holders!",
        "type_info": "Int8"
      }
    ],
    "parameters": {
      "Left": [
        "Interval",
        "Interval",
        "Text"
      ]
    },
    "nullable": [
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
    ]
  },
  "hash": "3b0145cc35e5e5fcbe5a49c777664eb9103f4d42f3a9b5a5338378db0bfb462e"
}
